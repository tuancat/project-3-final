# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4

commands:
  # Exercise - Rollback
  destroy_environment:
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: "on_fail"
          command: |
            echo << parameters.stack_name >>
            aws cloudformation delete-stack --stack-name << parameters.stack_name >>
            exit 1
  delete_stack:
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: "Delete << parameters.stack_name >> stack"
          shell: /bin/bash
          command: |
            # Get stack id for the delete_stack waiter
            stack_info=$(aws cloudformation describe-stacks --stack-name << parameters.stack_name >> --query "Stacks[*] | [0].StackId" 2>&1)
            if echo $stack_info | grep 'does not exist'
            then
              echo "Stack does not exist."
              echo $stack_info
              exit 0
            fi
            if echo $stack_info | grep 'ValidationError'
            then
              echo $stack_info
              exit 1
            else
              aws cloudformation delete-stack --stack-name << parameters.stack_name >>
              aws cloudformation wait stack-delete-complete --stack-name $stack_info
              echo "Stack deleted."
              exit 0
            fi
  deploy_stack:
    parameters:
      stack_name:
        type: string
      template_file:
        type: string
      parameter_overrides:
        type: string
    steps:
      - run:
          name: "Deploy << parameters.stack_name >> stack"
          command: |
            echo << parameters.stack_name >>
            echo << parameters.template_file >>
            echo << parameters.parameter_overrides >>
            aws cloudformation deploy \
            --stack-name << parameters.stack_name >> \
            --template-file << parameters.template_file >> \
            --parameter-overrides << parameters.parameter_overrides >> \
            --no-fail-on-empty-changeset \
            --region us-east-1
  get_commit_hash:
    steps:
      - run:
          name: "Get commit short hash for current and previous commit"
          command: |
            echo 'export cur_short_hash="$(cat ~/curshorthash)"' >> "$BASH_ENV"
            echo 'export pre_short_hash="$(cat ~/preshorthash)"' >> "$BASH_ENV"

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  create_network:
    executor: aws-cli/default
    environment:
      TEMPLATE_DIR: ~/project/build-cicd-pipeline/create-infrastructure
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      - aws-cli/setup
      - run:
          name: "Create Cloudformation NetWorking Stack"
          command: |
            aws cloudformation deploy \
            --stack-name NetWorking-CircleCI \
            --template-file $TEMPLATE_DIR/networking.yml \
            --parameter-overrides file://$TEMPLATE_DIR/networking-parameters.json \
            --no-fail-on-empty-changeset \
            --region us-east-1

  create_security:
    executor: aws-cli/default
    environment:
      TEMPLATE_DIR: ~/project/build-cicd-pipeline/create-infrastructure
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      - aws-cli/setup
      - run:
          name: "Create Cloudformation Security Stack"
          command: |
            aws cloudformation deploy \
            --stack-name Security-CircleCI \
            --template-file $TEMPLATE_DIR/security.yml \
            --parameter-overrides file://$TEMPLATE_DIR/security-parameters.json \
            --no-fail-on-empty-changeset \
            --region us-east-1 \
            --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"

  create_launch_template:
    executor: aws-cli/default
    environment:
      TEMPLATE_DIR: ~/project/build-cicd-pipeline/create-infrastructure
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      - aws-cli/setup
      - run:
          name: "Create Cloudformation Launch Template Stack"
          command: |
            aws cloudformation deploy \
            --stack-name Launch-Template-CircleCI \
            --template-file $TEMPLATE_DIR/launch-template.yml \
            --parameter-overrides file://$TEMPLATE_DIR/launch-template-parameters.json \
            --no-fail-on-empty-changeset \
            --region us-east-1

  create_ec2_instances:
    executor: aws-cli/default
    environment:
      TEMPLATE_DIR: ~/project/build-cicd-pipeline/create-infrastructure
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      - aws-cli/setup
      - run:
          name: "Create Cloudformation EC2 Instances Stack"
          command: |
            aws cloudformation deploy \
            --stack-name EC2-Instances-${CIRCLE_WORKFLOW_ID} \
            --template-file $TEMPLATE_DIR/ec2-instances.yml \
            --parameter-overrides file://$TEMPLATE_DIR/ec2-instances-parameters.json \
            --no-fail-on-empty-changeset \
            --region us-east-1

  add_publicipaddress_to_inventory:
    executor: aws-cli/default
    environment:
      PROJECT_TAG: ThaiDG-Udacity-ci-cd-exercise-ansible-exercise
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # This command will pull all of the files into a directory called project which can be found at ~/project.
      - checkout
      - aws-cli/setup
      - run:
          name: "Get EC2 Instances Public IP Address"
          command: |
            cd ~/project/build-cicd-pipeline/continuous-delivery/configuration-and-deployment/
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=$PROJECT_TAG" \
            --output text >> inventory
      - run:
          name: "Move inventory file into workspace"
          command: |
            cd ~/project/build-cicd-pipeline/continuous-delivery/configuration-and-deployment/
            mv inventory ~/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - "inventory"

  configure_infrastructure: 
    docker:
      - image: python:3.10.10-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a7:3d:b9:55:f2:2f:f6:9a:53:c6:e8:3b:8b:41:7c:4f"] 
      - run:
          name: "Install Ansible"
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook and Configure server
          command: |
            cd ~/project/build-cicd-pipeline/continuous-delivery/configuration-and-deployment/
            ansible-playbook -i ~/inventory main.yml

  smoke_test:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: "Smoke test"
          command: |
            while read line; do
              if [[ "$line" == "[all]" ]]; then
                continue
              else
                if curl -s --head http://$line:3000; then
                  echo "Tess pass"
                else
                  echo "Tess failed"
                  exit 1
                fi
              fi
            done < ~/inventory
      - destroy_environment:
          stack_name: EC2-Instances-$CIRCLE_WORKFLOW_ID
  
  create_and_deploy_front_end:
    executor: aws-cli/default
    environment:
      TEMPLATE_DIR: ~/project/build-cicd-pipeline/create-infrastructure
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: "Get git commit short-hash for the current and the previous commit and store to workspace"
          command: |
            # Git hash for the current commit
            export current_commit=<< pipeline.git.revision >>
            export cur_short_hash="${current_commit:0:7}"
            echo $cur_short_hash > ~/curshorthash
            # Git hash for the previous commit
            export previous_commit=<< pipeline.git.base_revision >>
            export pre_short_hash="${previous_commit:0:7}"
            echo $pre_short_hash > ~/preshorthash
      - persist_to_workspace:
          root: ~/
          paths:
            - "curshorthash"
            - "preshorthash"
      - get_commit_hash
      - deploy_stack:
          stack_name: S3Bucket-$cur_short_hash
          template_file: $TEMPLATE_DIR/bucket.yml
          parameter_overrides: MyBucketName=thaidg-bucket-$cur_short_hash
      - run:
          name: "Copy file to s3"
          command: |
            cd ~/project/build-cicd-pipeline/continuous-delivery/promote-to-production/
            aws s3 sync . s3://thaidg-bucket-$cur_short_hash --delete

  get_bucket_info:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - get_commit_hash
      - run:
          name: "Fetch and save the static host of the current bucket"
          command: |
            touch ~/websiteurl
            static_export_name=S3Bucket-$cur_short_hash-WebsiteURL
            host=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`$static_export_name\`].Value" \
            --no-paginate --output text)
            # Remove prefix ending in "//"
            static_host=${host#*//}
            echo $static_host > ~/websiteurl
      - run:
          name: "Save the old bucket name if it exist"
          shell: /bin/bash
          command: |
            touch ~/existbucket
            bucket_info=$(aws s3 ls s3://thaidg-bucket-$pre_short_hash 2>&1)
            if echo $bucket_info | grep 'NoSuchBucket'
            then
              echo "Old bucket doesn't exist"
              echo "" > ~/existbucket
            else
              old_bucket_uri=s3://thaidg-bucket-$pre_short_hash
              echo "Old bucket uri: $old_bucket_uri"
              echo $old_bucket_uri > ~/existbucket
            fi
      - persist_to_workspace:
          root: ~/
          paths: 
            - websiteurl
            - existbucket

  promote_to_production:
    executor: aws-cli/default
    environment:
      TEMPLATE_DIR: ~/project/build-cicd-pipeline/create-infrastructure
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - deploy_stack:
          stack_name: "production-distro"
          template_file: "$TEMPLATE_DIR/cloudfront.yml"
          parameter_overrides: "S3StaticHost=$(cat ~/websiteurl)"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - get_commit_hash
      - run:
          name: "Destroy the previous S3 bucket object"
          command: |
            old_bucket_uri=$(cat ~/existbucket)
            if [[ -n $old_bucket_uri ]]
            then
              # Empty before delete the bucket
              aws s3 rm $old_bucket_uri --recursive
            fi
      - delete_stack:
          stack_name: S3Bucket-$pre_short_hash

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  deploy-front-end-workflow:
    jobs:
      - create_network
      - create_security:
          requires:
            - "create_network"
      - create_launch_template:
          requires:
            - "create_security"
      - create_ec2_instances:
          requires:
            - "create_launch_template"
      - add_publicipaddress_to_inventory:
          requires:
            - "create_ec2_instances"
      - configure_infrastructure:
          requires:
            - "add_publicipaddress_to_inventory"
      - smoke_test:
          requires:
            - "configure_infrastructure"
      - create_and_deploy_front_end
      - get_bucket_info:
          requires:
            - "create_and_deploy_front_end"
      - promote_to_production:
          requires:
            - "get_bucket_info"
      - clean_up_old_front_end:
          requires:
            - "promote_to_production"
